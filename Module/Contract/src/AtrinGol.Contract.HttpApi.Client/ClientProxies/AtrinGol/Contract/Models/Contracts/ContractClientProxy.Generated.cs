// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using AtrinGol.Contract.Models.Contracts;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace AtrinGol.Contract.Models.Contracts;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IContractAppService), typeof(ContractClientProxy))]
public partial class ContractClientProxy : ClientProxyBase<IContractAppService>, IContractAppService
{
    public virtual async Task<PagedResultDto<ContractDto>> GetListAsync(PagedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<ContractDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedResultRequestDto), input }
        });
    }

    public virtual async Task<ContractDto> CreateAsync(CreateUpdateContractDto input)
    {
        return await RequestAsync<ContractDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateUpdateContractDto), input }
        });
    }

    public virtual async Task<ContractDto> UpdateAsync(long id, CreateUpdateContractDto input)
    {
        return await RequestAsync<ContractDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(long), id },
            { typeof(CreateUpdateContractDto), input }
        });
    }

    public virtual async Task DeleteAsync(long id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(long), id }
        });
    }

    public virtual async Task<ContractDto> GetAsync(long id)
    {
        return await RequestAsync<ContractDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(long), id }
        });
    }
}
